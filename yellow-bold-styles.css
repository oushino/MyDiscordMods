/* yellow-bold-styles.css */

/* Define a custom CSS variable for the yellow color */
:root {
  --yellow-bold-color: #ffff00;
}

/*
  This rule now targets a <span> element that is a direct child of a <strong> tag,
  which is itself a descendant of an element with a class starting with 'messageContent_'.
  The 'messageContent_c19' is a dynamically generated class, so using a wildcard
  selector like '[class^="messageContent_"]' is more robust, but '.markup' is often
  a more stable general class for message content.

  Let's try targeting the span directly within the strong tag first,
  as that's the most direct path to the text.
*/
.markup strong span,
[class^="messageContent_"] strong span {
  color: var(--yellow-bold-color) !important;
}

/*
  Explanation:
  - `.markup strong span`: This targets any `<span>` element that is inside a `<strong>`
    element, which is itself inside an element with the class `markup`. This is a
    good general approach for message content.
  - `[class^="messageContent_"] strong span`: This is a more specific (and robust)
    way to target elements within Discord messages.
    - `[class^="messageContent_"]`: This is an attribute selector that looks for
      any element whose `class` attribute *starts with* "messageContent_". This
      is safer than using the full `messageContent_c19` because the numbers/letters
      after the underscore often change with Discord updates.
    - `strong span`: This then targets the `<span>` element inside the `<strong>`
      element, which is inside the `messageContent_` element.

  The `!important` flag is still essential to ensure your custom style overrides
  Discord's default styles.
*/
